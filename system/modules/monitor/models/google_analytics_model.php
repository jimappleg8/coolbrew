<?php

/*
This model attempts to make the process of authenticating and interacting with
the Google API as invisible as possible. The goal is to make it so that you just
initialize the model and request data like any model pulling data from a database.
*/

require_once BASEPATH.'modules/monitor/libraries/google-api-php-client/src/Google_Client.php';
require_once BASEPATH.'modules/monitor/libraries/google-api-php-client/src/contrib/Google_AnalyticsService.php';

class Google_analytics_model extends Model {

   /**
    * The Google API client ID
    */
   var $gapi_client_id = '322182483029.apps.googleusercontent.com';
   
   /**
    * The Google API client secret
    */
   var $gapi_client_secret = 'tLglwN6BmMU7-N930qgYTZpZ';

   /**
    * The Google API client secret
    */
   var $gapi_redirect_uri = '';

   /**
    * The Google API application name
    */
   var $gapi_application_name = 'Google Analytics Dashboard';

   /**
    * The Google API scopes
    */
   var $gapi_scopes = array(
      'https://www.googleapis.com/auth/analytics.readonly',
   );

   /**
    * The Google API client object
    */
   var $gapi_client;

   /**
    * Error messages generated by the class
    */
	var $errorMsg = null;

   /**
    * CoolBrew object
    */
	var $CI;

   
   // --------------------------------------------------------------------

   function Google_analytics_model()
   {
      parent::Model();
      $this->load->library('session');
      $this->CI =& get_instance();
   }

   // --------------------------------------------------------------------

   function initialize()
   {
      // create the client object
      $this->gapi_client = new Google_Client();
      $this->gapi_client->setClientId($this->gapi_client_id);
      $this->gapi_client->setClientSecret($this->gapi_client_secret);
      $this->gapi_client->setRedirectUri($this->gapi_redirect_uri);
      $this->gapi_client->setApplicationName($this->gapi_application_name);
      $this->gapi_client->setScopes($this->gapi_scopes);
      
      // Returns objects from the Analytics Service
      // instead of associative arrays.
//      $this->gapi_client->setUseObjects(true);
   }

   // --------------------------------------------------------------------

   function set_redirect_uri($redirect_uri)
   {
      $this->gapi_redirect_uri = $redirect_uri;
   }

   // --------------------------------------------------------------------

   function set_application_name($application_name)
   {
      $this->gapi_application_name = $application_name;
   }

   // --------------------------------------------------------------------

   function get_client()
   {
      return $this->gapi_client;
   }
   
   // --------------------------------------------------------------------

   /**
    * Retrieves an access token from the storage object and sets it into the
    * client object.
    */
   public function set_access_token_from_session()
   {
      $accessToken = $this->session->userdata('accessToken');
      if ($accessToken != '')
      {
         $this->gapi_client->setAccessToken($accessToken);
      }
   }

   // --------------------------------------------------------------------

   /**
    * Goes through the client authorization routine. This routine both
    * redirects a user to the Google Accounts authorization screen as well as
    * handle the response from the authorization service to retrieve the
    * authorization code then exchange it for an access token. 
    *
    * Details on how the apiClient implements authorization can be found here:
    * http://code.google.com/p/google-api-php-client/source/browse/trunk/src/auth/apiOAuth2.php#84
    * If an authorization error occurs, the exception is caught and the error
    * message is saved in $error.
    */
   function authenticate()
   {
      try
      {
         $accessToken = $this->gapi_client->authenticate();
         $this->session->set_userdata('accessToken', $accessToken);
      }
      catch (Google_AuthException $e)
      {
         $this->errorMsg = $e->getMessage();
      }
   }

   // --------------------------------------------------------------------

   /**
    * Revokes an authorization token. This both revokes the token by making a
    * Google Accounts API request to revoke the token as well as deleting the
    * token from the storage mechanism. If any errors occur, the authorization
    * exception is caught and the message is stored in error.
    */
   function revoke_token()
   {
      $accessToken = $this->session->userdata('accessToken');
      if ($accessToken)
      {
         $tokenObj = json_decode($accessToken);
         try
         {
            $this->gapi_client->revokeToken($tokenObj->refresh_token);
            $this->session->unset_userdata('accessToken');
         }
         catch (Google_AuthException $e)
         {
            $this->errorMsg = $e->getMessage();
         }
      }
   }

   // --------------------------------------------------------------------

   /**
    * Returns whether the apiClient object has been authorized. If true,
    * the user can make authorized requests to the API.
    * @return bool Whether the client is authorized to make API requests.
    */
   function is_authorized()
   {
      return $this->gapi_client->getAccessToken() ? TRUE : FALSE;
   }

   // --------------------------------------------------------------------

	/**
	 * @return string Any error messages.
	 */
   function get_error()
   {
      return $this->errorMsg;
   }

   // --------------------------------------------------------------------
   
   function get_all_sites_summary($startDate, $endDate)
   {
      $this->CI->load->model('Analytics_source');
      
      $accounts = $this->CI->Analytics_source->get_active_sources('Google Analytics');
      
      $service = new Google_AnalyticsService($this->gapi_client);
      
      try
      {
         for ($i=0, $cnt=count($accounts); $i<$cnt; $i++)
         {
            $optParams = array(
               'dimensions' => 'ga:source,ga:keyword',
               'sort' => '-ga:visits,ga:keyword',
               'filters' => 'ga:medium==organic',
               'max-results' => '25');

            $result = $service->data_ga->get(
               'ga:'.$accounts[$i]['profile_id'],
               $startDate,
               $endDate,
               'ga:visits,ga:visitors,ga:pageviews,ga:pageviewsPerVisit,ga:avgTimeOnSite,ga:visitBounceRate,ga:percentNewVisits',
               array());
        
           $accounts[$i]['total_visits'] = $result['totalsForAllResults']['ga:visits'];
           $accounts[$i]['unique_visitors'] = $result['totalsForAllResults']['ga:visitors'];
           $accounts[$i]['pageviews'] = $result['totalsForAllResults']['ga:pageviews'];
           $accounts[$i]['pages_per_visit'] = $result['totalsForAllResults']['ga:pageviewsPerVisit'];
           $accounts[$i]['avg_visit_duration'] = $result['totalsForAllResults']['ga:avgTimeOnSite'];
           $accounts[$i]['bounce_rate'] = $result['totalsForAllResults']['ga:visitBounceRate'];
           $accounts[$i]['percent_new_visits'] = $result['totalsForAllResults']['ga:percentNewVisits'];
         }
      }
      catch (Google_ServiceException $e)
      {
         $this->errorMsg = $e->getMessage();
      }

      // We want to update the cached access token after each call to the API.
      if ($this->gapi_client->getAccessToken())
      {
         $this->session->set_userdata('accessToken', $this->gapi_client->getAccessToken());
      }
      
      return $accounts;
   }

   // --------------------------------------------------------------------
   
   function get_all_sites_status()
   {
      $this->CI->load->model('Analytics_source');
      
      $startDate = '2015-07-01';
      $endDate = '2015-07-31';
      
      $accounts = $this->CI->Analytics_source->get_active_sources('Google Analytics');
      
      $service = new Google_AnalyticsService($this->gapi_client);
      
      try
      {
         for ($i=0, $cnt=count($accounts); $i<$cnt; $i++)
         {
            $optParams = array(
               'dimensions' => 'ga:source,ga:keyword',
               'sort' => '-ga:visits,ga:keyword',
               'filters' => 'ga:medium==organic',
               'max-results' => '25');

            $result = $service->data_ga->get(
               'ga:'.$accounts[$i]['profile_id'],
               $startDate,
               $endDate,
               'ga:visits,ga:visitors,ga:pageviews,ga:pageviewsPerVisit,ga:avgTimeOnSite,ga:visitBounceRate,ga:percentNewVisits',
               array());
        
           $accounts[$i]['total_visits'] = $result['totalsForAllResults']['ga:visits'];
           $accounts[$i]['unique_visitors'] = $result['totalsForAllResults']['ga:visitors'];
           $accounts[$i]['pageviews'] = $result['totalsForAllResults']['ga:pageviews'];
           $accounts[$i]['pages_per_visit'] = $result['totalsForAllResults']['ga:pageviewsPerVisit'];
           $accounts[$i]['avg_visit_duration'] = $result['totalsForAllResults']['ga:avgTimeOnSite'];
           $accounts[$i]['bounce_rate'] = $result['totalsForAllResults']['ga:visitBounceRate'];
           $accounts[$i]['percent_new_visits'] = $result['totalsForAllResults']['ga:percentNewVisits'];
         }
      }
      catch (Google_ServiceException $e)
      {
         $this->errorMsg = $e->getMessage();
      }

      // We want to update the cached access token after each call to the API.
      if ($this->gapi_client->getAccessToken())
      {
         $this->session->set_userdata('accessToken', $this->gapi_client->getAccessToken());
      }
      
      return $accounts;
   }

   // --------------------------------------------------------------------

   /**
    * Runs all the "get metric" functions for the report to populate the
    *  data that is defined in the report.
    * 
    */
   function get_ga_report_data($report_id)
   {
      $this->CI->load->model('Analytics_source');
      $this->CI->load->model('Reports');
      
      $report = $this->Reports->get_report_data($report_id);
      
      $accounts = $this->CI->Analytics_source->get_active_sources('Google Analytics');
      
      $service = new Google_AnalyticsService($this->gapi_client);
      
      try
      {
         for ($i=0, $cnt=count($accounts); $i<$cnt; $i++)
         {
            $optParams = array(
               'dimensions' => 'ga:source,ga:keyword',
               'sort' => '-ga:visits,ga:keyword',
               'filters' => 'ga:medium==organic',
               'max-results' => '25');
            // we are not currently using these optional params
            $optParams = array();

            $result = $service->data_ga->get(
               'ga:'.$accounts[$i]['profile_id'],
               $report['start_date'],
               $report['end_date'],
               'ga:visits,ga:visitors,ga:pageviews,ga:pageviewsPerVisit,ga:avgTimeOnSite,ga:visitBounceRate,ga:percentNewVisits',
               $optParams);
        
           $accounts[$i]['total_visits'] = $result['totalsForAllResults']['ga:visits'];
           $accounts[$i]['unique_visitors'] = $result['totalsForAllResults']['ga:visitors'];
           $accounts[$i]['pageviews'] = $result['totalsForAllResults']['ga:pageviews'];
           $accounts[$i]['pages_per_visit'] = $result['totalsForAllResults']['ga:pageviewsPerVisit'];
           $accounts[$i]['avg_visit_duration'] = $result['totalsForAllResults']['ga:avgTimeOnSite'];
           $accounts[$i]['bounce_rate'] = $result['totalsForAllResults']['ga:visitBounceRate'];
           $accounts[$i]['percent_new_visits'] = $result['totalsForAllResults']['ga:percentNewVisits'];
         }
      }
      catch (Google_ServiceException $e)
      {
         $this->errorMsg = $e->getMessage();
      }

      // We want to update the cached access token after each call to the API.
      if ($this->gapi_client->getAccessToken())
      {
         $this->session->set_userdata('accessToken', $this->gapi_client->getAccessToken());
      }
      
      return $accounts;
   }

   // --------------------------------------------------------------------

   function get_accounts()
   {
      $this->CI->load->model('Analytics_source');
      
      $accounts = $this->CI->Analytics_source->get_active_sources('Google Analytics');

      $this->gapi_client->setUseObjects(true);
      $service = new Google_AnalyticsService($this->gapi_client);

      try
      {
         for ($i=0, $cnt=count($accounts); $i<$cnt; $i++)
         {
            $webproperties = $service->management_webproperties->listManagementWebproperties($accounts[$i]['account_id']);

            if (is_object($webproperties))
            {
               if (count($webproperties->getItems()) > 0)
               {
                  $items = $webproperties->getItems();
                  $firstWebpropertyId = $items[0]->getId();

                  $profiles = $service->management_profiles->listManagementProfiles($accounts[$i]['account_id'], $firstWebpropertyId);

                  if (count($profiles->getItems()) > 0)
                  {
                     $items = $profiles->getItems();
               
                     $source_id = $accounts[$i]['id'];

                     $values['profile_id'] = $items[0]->getId();
                     $values['profile_name'] = $items[0]->getName();
 
                     $this->CI->Analytics_source->update_source($source_id, $values);
                  }
               }
            }
         }
      }
      catch (Google_ServiceException $e)
      {
         $this->errorMsg = $e->getMessage();
      }

      // We want to update the cached access token after each call to the API.
      if ($this->gapi_client->getAccessToken())
      {
         $this->session->set_userdata('accessToken', $this->gapi_client->getAccessToken());
      }
      
      $accounts = $this->CI->Analytics_source->get_active_sources('Google Analytics');
      return $accounts;
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric
    * 
    */
   function get_dp_simple_site_metric($report_id, $data_point_id, $metric)
   {
      $this->CI->load->model('Analytics_source');
      $this->CI->load->model('Reports');
      $this->CI->load->model('Report_site_link');
      $this->CI->load->model('Report_data');

      $report = $this->Reports->get_report_data($report_id);

      $accounts = $this->CI->Report_site_link->get_report_ga_accounts($report_id);

      $service = new Google_AnalyticsService($this->gapi_client);

      try
      {
         for ($i=0, $cnt=count($accounts); $i<$cnt; $i++)
         {
            $result = $service->data_ga->get(
               'ga:'.$accounts[$i]['profile_id'],
               $report['start_date'],
               $report['end_date'],
               $metric,
               array());
               
            $new_data = array();
            $new_data['report_id'] = $report_id;
            $new_data['data_point_id'] = $data_point_id;
            $new_data['site_id'] = $accounts[$i]['site_id'];
            $new_data['amount'] = $result['totalsForAllResults'][$metric];
            $this->CI->Report_data->insert_data($new_data);
         }
      }
      catch (Google_ServiceException $e)
      {
         $this->errorMsg = $e->getMessage();
      }

      // We want to update the cached access token after each call to the API.
      if ($this->gapi_client->getAccessToken())
      {
         $this->session->set_userdata('accessToken', $this->gapi_client->getAccessToken());
      }
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_visits
    * 
    */
   function get_dp_site_visits($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_visits', 'ga:visits');
      return 'Collected site_visits data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_unique_visitors
    * 
    */
   function get_dp_site_unique_visitors($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_unique_visitors', 'ga:visitors');
      return 'Collected site_unique_visitors data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_pageviews
    * 
    */
   function get_dp_site_pageviews($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_pageviews', 'ga:pageviews');
      return 'Collected site_pageviews data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_percent_new_visitors
    * 
    */
   function get_dp_site_percent_new_visitors($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_percent_new_visitors', 'ga:percentNewVisits');
      return 'Collected get_dp_site_percent_new_visitors data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_pageviews_per_visit
    * 
    */
   function get_dp_site_pageviews_per_visit($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_pageviews_per_visit', 'ga:pageviewsPerVisit');
      return 'Collected site_pageviews_per_visit data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_average_visit_duration
    * 
    */
   function get_dp_site_average_visit_duration($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_average_visit_duration', 'ga:avgTimeOnSite');
      return 'Collected site_average_visit_duration data from Google Analytics.';
   }

   // --------------------------------------------------------------------

   /**
    * Get Metric: site_bounce_rate
    * 
    */
   function get_dp_site_bounce_rate($report_id)
   {
      $this->get_dp_simple_site_metric($report_id, 'site_bounce_rate', 'ga:visitBounceRate');
      return 'Collected site_bounce_rate data from Google Analytics.';
   }


}

/* End of file google_analytics_model.php */
/* Location: ./system/modules/monitor/models/google_analytics_model.php */